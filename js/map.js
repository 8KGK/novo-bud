// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ä—Ç–æ—é
const MapController = {
    map: null,
    polygonObjects: {},
    isDeleteMode: false,
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
    async init() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            window.tg = window.Telegram.WebApp;
            window.tg.expand();
            window.tg.ready();
            document.body.style.backgroundColor = window.tg.backgroundColor || '#ffffff';
        }
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
        this.map = L.map('map', {
            center: CONFIG.MAP_CENTER,
            zoom: CONFIG.MAP_ZOOM,
            tap: true,
            tapTolerance: 15,
            touchZoom: true,
            dragging: true,
            zoomControl: true
        });
        
        // –î–æ–¥–∞—î–º–æ —Ç–∞–π–ª–∏
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(this.map);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        window.residentialComplexes = await Storage.loadData();
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–º–ø–ª–µ–∫—Å–∏
        this.renderComplexes();
        
        // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è popup
        this.map.on('popupopen', (e) => {
            const px = this.map.project(e.popup._latlng);
            px.y -= e.popup._container.clientHeight / 2;
            this.map.panTo(this.map.unproject(px), {animate: true});
        });
    },
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ñ–ö –Ω–∞ –∫–∞—Ä—Ç—ñ
renderComplexes() {
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–ª—ñ–≥–æ–Ω–∏
    Object.values(this.polygonObjects).forEach(obj => {
        this.map.removeLayer(obj.polygon);
        if (obj.marker) this.map.removeLayer(obj.marker);
    });
    this.polygonObjects = {};
    
    // –ú–∞–ª—é—î–º–æ –Ω–æ–≤—ñ
    window.residentialComplexes.forEach((complex, index) => {
        // –°—Ç–≤–æ—Ä—é—î–º–æ popup –∫–æ–Ω—Ç–µ–Ω—Ç –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–ª—ñ–≥–æ–Ω—É
        const popupContent = `
            <div class="popup-content">
                <h3>${complex.name}</h3>
                <p><strong>–û–ø–∏—Å:</strong> ${complex.description}</p>
                <p><strong>–ü–æ–≤–µ—Ä—Ö–æ–≤—ñ—Å—Ç—å:</strong> ${complex.floors}</p>
                <p><strong>–ó–∞–±—É–¥–æ–≤–Ω–∏–∫:</strong> ${complex.developer}</p>
                <p class="price">${complex.price}</p>
            </div>
        `;
        
        const polygon = L.polygon(complex.coordinates, {
            color: CONFIG.STATUS_BORDERS[complex.status],
            fillColor: CONFIG.STATUS_COLORS[complex.status],
            fillOpacity: 0.5,
            weight: 3,
            className: this.isDeleteMode ? 'deletable-polygon' : ''
        }).addTo(this.map);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—á–∫—É –∑ –Ω–∞–∑–≤–æ—é - –∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–∞
        const center = polygon.getBounds().getCenter();
        const marker = L.marker(center, {
            icon: L.divIcon({
                className: 'custom-marker-label',
                html: `<div>${complex.name}</div>`,
                iconSize: [100, 20],
                iconAnchor: [50, 10]
            }),
            zIndexOffset: 1000,
            interactive: false
        }).addTo(this.map);
        
        if (!this.isDeleteMode) {
            polygon.bindPopup(popupContent, {
                maxWidth: 300,
                closeButton: true
            });
        } else {
            polygon.on('click', () => {
                if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ "${complex.name}"?`)) {
                    this.deleteComplex(index);
                }
            });
        }
        
        this.polygonObjects[index] = { polygon, marker };
    });
},
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ñ–ö
    deleteComplex(index) {
        const deletedName = window.residentialComplexes[index].name;
        window.residentialComplexes.splice(index, 1);
        Storage.saveLocal(window.residentialComplexes);
        this.renderComplexes();
        Storage.showSyncStatus(`üóëÔ∏è –ñ–ö "${deletedName}" –≤–∏–¥–∞–ª–µ–Ω–æ!`);
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
    showDetails(complexName) {
        const complex = window.residentialComplexes.find(c => c.name === complexName);
        
        if (window.tg) {
            window.tg.sendData(JSON.stringify({
                action: 'show_details',
                complex: complexName,
                data: complex
            }));
        } else {
            alert(`–î–µ—Ç–∞–ª—ñ –ø—Ä–æ: ${complexName}\n\n${complex.description}\n${complex.price}`);
        }
    }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('DOMContentLoaded', () => {
    MapController.init();
});

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
window.MapController = MapController;