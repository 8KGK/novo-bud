// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é
const Storage = {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
    async loadData() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
            const serverData = await this.fetchFromServer();
            if (serverData && serverData.length > 0) {
                this.saveLocal(serverData);
                this.showSyncStatus('‚úÖ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞');
                return serverData;
            }
        } catch (error) {
            console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
        
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ
        const localData = this.loadLocal();
        if (localData && localData.length > 0) {
            this.showSyncStatus('üì± –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ');
            return localData;
        }
        
        // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ
        this.showSyncStatus('üÜï –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ');
        return CONFIG.DEFAULT_COMPLEXES;
    },
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    saveLocal(data) {
        try {
            localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(data));
            localStorage.setItem(CONFIG.LAST_SYNC_KEY, new Date().toISOString());
            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ:', error);
            return false;
        }
    },
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    loadLocal() {
        try {
            const data = localStorage.getItem(CONFIG.STORAGE_KEY);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error);
            return null;
        }
    },
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞ (JSONBin)
    async fetchFromServer() {
        if (CONFIG.USE_GITHUB) {
            return await this.fetchFromGitHub();
        }
        
        try {
            const response = await fetch(CONFIG.API_URL, {
                method: 'GET',
                headers: {
                    'X-Master-Key': CONFIG.API_KEY,
                    'X-Bin-Meta': 'false'
                }
            });
            
            if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
            
            const data = await response.json();
            return data.record || data;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ JSONBin:', error);
            throw error;
        }
    },
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ GitHub
    async fetchFromGitHub() {
        try {
            const url = `https://api.github.com/repos/${CONFIG.GITHUB_API.owner}/${CONFIG.GITHUB_API.repo}/contents/${CONFIG.GITHUB_API.path}`;
            
            const response = await fetch(url, {
                headers: {
                    'Authorization': `token ${CONFIG.GITHUB_API.token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });
            
            if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ GitHub');
            
            const fileData = await response.json();
            const content = atob(fileData.content);
            return JSON.parse(content);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ GitHub:', error);
            throw error;
        }
    },
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveToServer(data) {
        if (CONFIG.USE_GITHUB) {
            return await this.saveToGitHub(data);
        }
        
        try {
            const response = await fetch(CONFIG.API_URL, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Master-Key': CONFIG.API_KEY
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            
            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ JSONBin:', error);
            throw error;
        }
    },
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞ GitHub
    async saveToGitHub(data) {
        try {
            const url = `https://api.github.com/repos/${CONFIG.GITHUB_API.owner}/${CONFIG.GITHUB_API.repo}/contents/${CONFIG.GITHUB_API.path}`;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ SHA –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            const currentFile = await fetch(url, {
                headers: {
                    'Authorization': `token ${CONFIG.GITHUB_API.token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });
            
            let sha = null;
            if (currentFile.ok) {
                const fileData = await currentFile.json();
                sha = fileData.sha;
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª
            const content = btoa(JSON.stringify(data, null, 2));
            const response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${CONFIG.GITHUB_API.token}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: `Update complexes data - ${new Date().toISOString()}`,
                    content: content,
                    sha: sha
                })
            });
            
            if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ GitHub');
            
            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ GitHub:', error);
            throw error;
        }
    },
    
    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
    async syncData() {
        const syncBtn = document.querySelector('.sync-btn');
        syncBtn.classList.add('syncing');
        syncBtn.textContent = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...';
        
        try {
            const localData = this.loadLocal();
            
            if (!localData || localData.length === 0) {
                this.showSyncStatus('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', true);
                return;
            }
            
            await this.saveToServer(localData);
            this.showSyncStatus('‚úÖ –î–∞–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            this.showSyncStatus('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.', true);
        } finally {
            syncBtn.classList.remove('syncing');
            syncBtn.textContent = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è';
        }
    },
    
    // –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
    exportData() {
        const data = window.residentialComplexes || this.loadLocal() || CONFIG.DEFAULT_COMPLEXES;
        const dataStr = JSON.stringify(data, null, 2);
        const blob = new Blob([dataStr], {type: 'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `novobud_complexes_${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        this.showSyncStatus('‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
    },
    
    // –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
    importData(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importedData = JSON.parse(e.target.result);
                
                if (!Array.isArray(importedData)) {
                    alert('‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º–∞—Å–∏–≤ –ñ–ö!');
                    return;
                }
                
                const isValid = importedData.every(complex => 
                    complex.name && 
                    complex.coordinates && 
                    Array.isArray(complex.coordinates) &&
                    complex.price &&
                    complex.status
                );
                
                if (!isValid) {
                    alert('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö!');
                    return;
                }
                
                const action = confirm(
                    `üì• –ó–Ω–∞–π–¥–µ–Ω–æ ${importedData.length} –ñ–ö\n\n` +
                    `OK - –î–æ–¥–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö\n` +
                    `–°–∫–∞—Å—É–≤–∞—Ç–∏ - –ó–∞–º—ñ–Ω–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ`
                );
                
                if (action) {
                    window.residentialComplexes = window.residentialComplexes.concat(importedData);
                    this.showSyncStatus(`‚úÖ –î–æ–¥–∞–Ω–æ ${importedData.length} –Ω–æ–≤–∏—Ö –ñ–ö!`);
                } else {
                    window.residentialComplexes = importedData;
                    this.showSyncStatus(`‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${importedData.length} –ñ–ö!`);
                }
                
                this.saveLocal(window.residentialComplexes);
                window.MapController.renderComplexes();
                
            } catch (error) {
                alert('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:\n\n' + error.message);
            }
        };
        
        reader.readAsText(file);
        event.target.value = '';
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    showSyncStatus(message, isError = false) {
        const statusEl = document.getElementById('syncStatus');
        statusEl.textContent = message;
        statusEl.className = 'sync-status show';
        if (isError) statusEl.classList.add('error');
        
        setTimeout(() => {
            statusEl.classList.remove('show');
        }, 3000);
    }
};